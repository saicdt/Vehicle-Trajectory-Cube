#!/usr/bin/env python                                                               
import time
import sys
import curses
import argparse
import sys
import os
import time
import struct
import math

parser = argparse.ArgumentParser(description="Viewer for .dmp files")
parser.add_argument('-i', '--input', type=str, help='input file (if not defined stdin)', required=True)
# parser.add_argument('-f', '--format', type=str, help='format of records e.g. "<ffQi" for float float uint64 integer', required=True)
parser.add_argument('-j', '--jump', type=int, help='start on the i-th record', default=0)

# @ 	native 	native 	native
# = 	native 	standard 	none
# < 	little-endian 	standard 	none
# > 	big-endian 	standard 	none
# ! 	network (= big-endian) 	standard 	none

# x 	pad byte 	no value 	  	 
# c 	char 	string of length 1 	1 	 
# b 	signed char 	integer 	1 	(3)
# B 	unsigned char 	integer 	1 	(3)
# ? 	_Bool 	bool 	1 	(1)
# h 	short 	integer 	2 	(3)
# H 	unsigned short 	integer 	2 	(3)
# i 	int 	integer 	4 	(3)
# I 	unsigned int 	integer 	4 	(3)
# l 	long 	integer 	4 	(3)
# L 	unsigned long 	integer 	4 	(3)
# q 	long long 	integer 	8 	(2), (3)
# Q 	unsigned long long 	integer 	8 	(2), (3)
# f 	float 	float 	4 	(4)
# d 	double 	float 	8 	(4)
# s 	char[] 	string 	  	 
# p 	char[] 	string 	  	 
# P 	void * 	integer 	  	(5), (3)

args = parser.parse_args()


type_mapping = { \
    'uint8' :'B', 
    'uint16':'H', 
    'uint32':'I', 
    'uint64':'Q',
    'float' :'f',
    'nc_dim_cat_1'  : 'B',
    'nc_dim_cat_2'  : 'H',
    'nc_dim_cat_4'  : 'I',
    'nc_dim_cat_8'  : 'Q',
    'nc_var_uint_1' : 'B',
    'nc_var_uint_2' : 'H',
    'nc_var_uint_4' : 'I',
    'nc_var_uint_8' : 'Q',
    'nc_dim_time_1' : 'B',
    'nc_dim_time_2' : 'H',
    'nc_dim_time_4' : 'I',
    'nc_dim_time_8' : 'Q'
}
for i in xrange(32):
    type_mapping[ 'nc_dim_quadtree_%d' % i ] = 'II'

class Config(object):
 
    def __init__(self, args):
        self.pos = 0
        self.count = 20
        self.filename = args.input
        self.input_stream = open(args.input, "r")

        # get file size
        self.input_stream.seek(0,2)
        self.input_file_size = self.input_stream.tell()

        # go to the beginning of the file
        self.input_stream.seek(0)

        # print self.input_file_size
        
        header = []

        # find \0a \0a
        buffer = self.input_stream.read(2)
        a, b = buffer[0], buffer[1]
        header.append(a)
        while True:
            # print a, b
            header.append(b)
            if a == '\n' and b == '\n':
                break;
            a = b
            b = self.input_stream.read(1)[0]
            self.pos += 1
        self.pos += 2

        # figure out the format of the file

        record_format = ['<']

        header = "".join(header)
        lines = header.split('\n')
        for line in lines:
            tokens = [x for x in line.replace(':',' ').replace(',',' ').split(' ') if len(x) > 0]
            if len(tokens) < 3 or tokens[0] != 'field':
                continue
            field_type   = tokens[2]
            field_format = type_mapping.get(field_type, None)
            if field_format == None:
                continue
            record_format.append(field_format)



        self.format = ''.join(record_format)
        self.record_size = struct.calcsize(self.format)

        self.starting_record_pos = self.pos
        self.number_of_records = (self.input_file_size - self.starting_record_pos) / self.record_size

        self.pos = self.starting_record_pos + self.record_size * args.jump

        # self.input_stream.seek(self.pos, 0)
        # buffer = self.input_stream.read(400)

    def next_frame(self):
        # write on console the first 16 bytes
        self.input_stream.seek(self.pos)
        buffer = self.input_stream.read(self.count * self.record_size)

        result = ['index: ', str((self.pos - self.starting_record_pos)/self.record_size) , '    struct size: ', str(self.record_size), '    num. records: ', str(self.number_of_records), '\n']
        for i in xrange(self.count):
            values = struct.unpack_from(self.format, buffer, i * config.record_size);
            result = result + [(str(values)), '\n']
        # result = 

        # width = 20
        # i = 0
        # result = []
        # for c in buffer:
        #     if i > 0 and (i % width) == 0:
        #         result.append('\n')
        #     result.append("%02x " % ord(c))
        #     i += 1
        return "".join(result);

    def advance(self):
        self.pos += self.record_size 

    def rewind(self):
        self.pos = max(self.pos - self.record_size, 0);

config = Config(args)

    


# stdscr = curses.initscr()
# curses.noecho();
    
def mainloop(stdscr):

    global config

    while True:

        curses.flushinp()
        stdscr.clear()

        stdscr.addstr(config.next_frame());
    
        # read next instruction
        ch = stdscr.getch()
        # stdscr.addstr("read char\n")
    
        if ch == ord('.') or ch == 39:
            config.advance()
        elif ch == ord(',') or ch == 37:
            config.rewind()
        elif ch == ord('q'):
            break

curses.wrapper(mainloop)






















# def alarmloop(stdscr):
#     stdscr.addstr("How many seconds (alarm1)? ")
#     curses.echo()
#     alarm1 = int(stdscr.getstr())
#     while (1):
#         time.sleep(alarm1)
#         curses.flushinp()
#         stdscr.clear()
#         stdscr.addstr("Alarm1\n")
#         stdscr.addstr("Continue (Y/N)?[Y]:")
#         doit = stdscr.getch()
#         stdscr.addstr("\n")
#         stdscr.addstr("Input "+chr(doit)+"\n")
#         stdscr.refresh()
#         if doit == ord('N') or doit == ord('n'):
#             stdscr.addstr("Exiting.....\n")
#             break
# curses.wrapper(alarmloop)





# import sys




# while True:
    
#     # clear screen
#     sys.stderr.write("\x1b[2J\x1b[H")

#     # write on console the first 16 bytes
#     buffer = input_stream.read(400)
#     width = 20
#     i = 0
#     for c in buffer:
#         if i > 0 and (i % width) == 0:
#             sys.stdout.write('\n')
#         sys.stdout.write("%02x " % ord(c))
#         i += 1

#     # read next instruction
#     ch =  raw_input('')
#     if ch == 'q':
#         break;
    
