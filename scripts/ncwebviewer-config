#!/usr/bin/env python                                                               
import sys,argparse,json,urllib2,random,math

###################################################################


ConfigTemplate={
    "title": None, 
    "url": None, 
    "latlonbox": {"min":{}, "max":{}},
    "tilesurl": "http://{s}.tile.osm.org/{z}/{x}/{y}.png", 
    "heatmapmaxlevel": 25, 
    "div": {
        "info": {
            "opacity": 0.9, 
            "padding": 0, 
            "z-index": 1, 
            "right": "1ch", 
            "color": "white", 
            "position": "absolute", 
            "top": "1em", 
            "height": "1em"
        }
    }
}

SpatialVariableTemplate={
    "float": "left", 
    "height": "100%", 
    "padding": 0, 
    "width": "100%", 
    "z-index": 0, 
    "margin": 0
}
    
TemporalVariableTemplate={
    "opacity": 0.8, 
    "width": "75%", 
    "z-index": 1, 
    "left": "1ch", 
    "bottom": "1em", 
    "position": "absolute", 
    "background-color": "#555", 
    "height": "10em"
}

CategoricalVariableTemplate={
    "opacity": 0.8, 
    "width": "30%", 
    "z-index": 1, 
    "right": "1ch", 
    "margin-left": "10ch", 
    "position": "absolute", 
    "top": "1em", 
    "background-color": "#555", 
    "height": "30em",
    "alpha_order": True,
    "displaynumcat": 25,
    "logaxis": False
}

###############################################################################


# { fields:
#    [ { name: 'src',
#        type: 'nc_dim_quadtree_25',
#        valnames: {} },
#     { name: 'crime',
#       type: 'nc_dim_cat_1',
#       valnames:
#        { CRIM_SEXUAL_ASSAULT: 7,
#          WEAPONS_VIOLATION: 30,
#          KIDNAPPING: 13,
#          OFFENSE_INVOLVING_CHILDREN: 20,
#          CONCEALED_CARRY_LICENSE_VIOLATION: 4,
#          SEX_OFFENSE: 27,
#          INTIMIDATION: 12,
#          PROSTITUTION: 23,
#          ARSON: 0,
#          BURGLARY: 3,
#          ROBBERY: 26,
#          CRIMINAL_TRESPASS: 6,
#          THEFT: 29,
#          HOMICIDE: 10,
#          OBSCENITY: 19,
#          OTHER_NARCOTIC_VIOLATION: 21,
#          MOTOR_VEHICLE_THEFT: 15,
#          GAMBLING: 9,
#          NARCOTICS: 16,
#          'NON-CRIMINAL_(SUBJECT_SPECIFIED)': 18,
#          DECEPTIVE_PRACTICE: 8,
#          STALKING: 28,
#          CRIMINAL_DAMAGE: 5,
#          PUBLIC_PEACE_VIOLATION: 25,
#          BATTERY: 2,
#          ASSAULT: 1,
#          PUBLIC_INDECENCY: 24,
#          'NON-CRIMINAL': 17,
#          LIQUOR_LAW_VIOLATION: 14,
#          OTHER_OFFENSE: 22,
#          INTERFERENCE_WITH_PUBLIC_OFFICER: 11 } },
#      { name: 'time',
#        type: 'nc_dim_time_2',
#        valnames: {} },
#      { name: 'count',
#        type: 'nc_var_uint_4',
#        valnames: {} } ],
#   metadata:
#    [ { key: 'tbin',
#        value: '2013-12-01_00:00:00_3600s' },
#      { key: 'src__origin',
#        value: 'degrees_mercator_quadtree25' },
#      { key: 'name', value: 'crime50k.csv' } ] }


class Schema:
    def __init__(self, name):
        self.name = name
        self.fields = []
    def addField(self, field_name, field_type, field_valnames=None):
        field = Field(field_name, field_type, field_valnames)
        self.fields.append(field)
        return field

class Field:
    def __init__(self, name, field_type, valnames):
        self.name = name
        self.type = field_type
        self.valnames = valnames
        
    def isSpatial(self):
        return self.type.startswith("nc_dim_quadtree_")
    def isCategorical(self):
        return self.type.startswith("nc_dim_cat_")
    def isTemporal(self):
        return self.type.startswith("nc_dim_time_")
    def spatialResolution(self):
        if self.isSpatial():
            return int(self.type.split('_')[-1])

## Find the bounding box
def findext(server,dim,tiles,maxlevel,func,initp,numoftiles=5):
    query_url='%s/count.a("%s",dive(tile2d({x},{y},{z}),{drill}),"img")'%(server,dim)
    
    p = initp
    newtiles=[]
    for location in tiles:
        res =  json.load(urllib2.urlopen(query_url.format(**location)))
        res = res['root']['children']
        offset = {'x':location['x']*2**location['drill'],
                  'y':location['y']*2**location['drill'],
                  'z':location['z']+location['drill']}

        #add offset
        res = [{'x':d['x']+offset['x'],
                'y':d['y']+offset['y'],
                'z':offset['z']} for d in res]
        
        #find extrememum
        p={'x':func(p['x'],func(res,key=lambda d: d['x'])['x']),
           'y':func(p['y'],func(res,key=lambda d: d['y'])['y']),
           'z':offset['z']}

        newtiles += [ t for t in res \
                      if  (t['x'] == p['x'] or t['y'] == p['y'])]

    if p['z'] >= maxlevel: # base case
        return p

    #filter out excessive tiles
    newtiles = [ t for t in newtiles \
                 if  (t['x'] == p['x'] or t['y'] == p['y'])]

    random.shuffle(newtiles)

    #Go into the next level
    nextdrill = min(8,maxlevel-p['z'])
    for t in newtiles: t['drill'] = nextdrill

    return findext(server,dim,newtiles[:numoftiles],maxlevel,
                   func,initp,numoftiles)

def num2deg(p):
    xtile = p['x']
    ytile = p['y']
    zoom = p['z']
    
    n = 2.0 ** zoom
    ytile = n-ytile-1

    lon_deg = xtile / n * 360.0 - 180.0
    lat_rad = math.atan(math.sinh(math.pi * (1 - 2 * ytile / n)))
    lat_deg = math.degrees(lat_rad)
    return [lat_deg, lon_deg]

def findbox(server,dim,maxlevel):
    # min query
    minp = findext(server,dim,[{'x':0,'y':0,'z':0,'drill':8}],maxlevel,min,
                   {'x':float('inf'),'y':float('inf')})
    # max query
    maxp = findext(server,dim,[{'x':0,'y':0,'z':0,'drill':8}],maxlevel,max,
                   {'x':float('-inf'),'y':float('-inf')})
    
    return (num2deg(minp),num2deg(maxp))
    


##### Main ######        
parser = argparse.ArgumentParser();
parser.add_argument('-s', 
                    "--server", 
                    dest="server", 
                    type=str, 
                    required=True, 
                    help='Nanocube Server URL')
parser.add_argument('-o', 
                    "--output", 
                    dest="output", 
                    type=str,
                    default="",
                    required=False, 
                    help='Output configuration .json file')
args = parser.parse_args()



# load schema
# print args.server
response = urllib2.urlopen(args.server+"/schema")
schema_json = json.loads(response.read())

#
# spatial field
#

name           = None
spatial_field  = None
temporal_field = None

for item in schema_json['metadata']:
    if item['key'] == 'name':
        name = item['value']

    # elif item['value'].startswith('degrees_mercator_quadtree'):
    #     spatial_field_name = item['key'].split('_')[0]
    #     spatial_resolution = int(item['value'][len('degrees_mercator_quadtree'):])
    
schema = Schema(name)

for json_field in schema_json['fields']:
    if 'valnames' not in json_field:
        json_field['valnames'] = None
    
    field = schema.addField(json_field['name'],
                            json_field['type'],
                            json_field['valnames'])
    if field.isSpatial():
        spatial_field = field
    elif field.isTemporal():
        temporal_field = field


# General Config
config= ConfigTemplate;
config['title']= schema.name
config['url'] = args.server
config['heatmapmaxlevel'] = spatial_field.spatialResolution()

charttop=3
for f in schema.fields:
    if f.isCategorical():
        config['div'][f.name] = CategoricalVariableTemplate.copy()

        #construct the width and height of the margins
        numofcat = min(25,len(f.valnames))
        height = numofcat*1.5+4
        config['div'][f.name]['displaynumcat'] = numofcat
        config['div'][f.name]['height'] = "%dem"%(height)
        config['div'][f.name]['top'] = "%dem"%(charttop)
        charttop += height+1
        
        txtlen = len(max(f.valnames, key=lambda x:len(x.strip())))
        margin = max(1.2*txtlen+1, 15)
        config['div'][f.name]['margin-left'] = "%dch"%(margin)
        config['div'][f.name]['width'] = "%dch"%(margin+30)
        
    if f.isTemporal():
        if f.name != 'defaulttime':
            config['div'][f.name] = TemporalVariableTemplate.copy()

    if f.isSpatial():
        minp,maxp = findbox(args.server,f.name,
                            spatial_field.spatialResolution()-8)
        
        config['latlonbox']['min'][f.name]= minp
        config['latlonbox']['max'][f.name]= maxp
        config['div'][f.name] = SpatialVariableTemplate.copy()

        
ostream = open(args.output,"w") if len(args.output) else sys.stdout
ostream.write(json.dumps(config,indent=2))
ostream.close()
